package com.controllers;

import com.alipay.api.AlipayApiException;
import com.liuzg.jswebextra.plugins.AlipayPlugin;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

@Controller
@RequestMapping("/alipay")
public class AliPayController{

    AlipayPlugin alipayPlugin = new AlipayPlugin();

    /**
     * 支付宝支付
     * @param out_trade_no 商户订单号，商户网站订单系统中唯一订单号，必填
     * @param subject 订单名称，必填
     * @param total_amount 付款金额，必填
     * @param body 商品描述，可空
     * @param timeout_express 超时时间 可空
     * @param product_code 销售产品码 可空
     */
    @RequestMapping("/doalipay")
    @ResponseBody
    public void doalipay(String out_trade_no, String subject, String total_amount, String body, String timeout_express, String product_code, HttpServletRequest httpRequest, HttpServletResponse httpResponse){
        try {
            alipayPlugin.doPay(out_trade_no,subject,total_amount,body,timeout_express,product_code, httpRequest,httpResponse);
        } catch (AlipayApiException e) {
            e.printStackTrace();
        }
    }

    @RequestMapping("/getNotifyResultPay")
    @ResponseBody
    public String getNotifyResultPay(HttpServletRequest request){
        //获取支付宝POST过来反馈信息
        Map<String,String> params = new HashMap<String,String>();
        Map requestParams = request.getParameterMap();
        for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {
            String name = (String) iter.next();
            String[] values = (String[]) requestParams.get(name);
            String valueStr = "";
            for (int i = 0; i < values.length; i++) {
                valueStr = (i == values.length - 1) ? valueStr + values[i]
                        : valueStr + values[i] + ",";
            }
            //乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化
            //valueStr = new String(valueStr.getBytes("ISO-8859-1"), "gbk");
            params.put(name, valueStr);
        }

        //获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//
        //商户订单号

        String out_trade_no = request.getParameter("out_trade_no");

        //支付宝交易号

        String trade_no = request.getParameter("trade_no");

        //交易状态
        String trade_status = request.getParameter("trade_status");

        //获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//

        if(alipayPlugin.getNotifyResultPay(params)){//验证成功
            //////////////////////////////////////////////////////////////////////////////////////////
            //请在这里加上商户的业务逻辑程序代码

            //——请根据您的业务逻辑来编写程序（以下代码仅作参考）——
            boolean flg = false;
            if(trade_status.equals("TRADE_FINISHED")){
                //判断该笔订单是否在商户网站中已经做过处理
                //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                //请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的
                //如果有做过处理，不执行商户的业务程序

                //注意：
                //退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
            } else if (trade_status.equals("TRADE_SUCCESS")){
                //判断该笔订单是否在商户网站中已经做过处理
                //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                //请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的
                //如果有做过处理，不执行商户的业务程序

                //注意：
                //付款完成后，支付宝系统发送该交易状态通知

                //根据订单号将订单状态和支付宝记录表中状态都改为已支付


            }

            //——请根据您的业务逻辑来编写程序（以上代码仅作参考）——

            //out.print("success"); //请不要修改或删除
            if(flg){
                return "success";
            }else{
                return "fail";
            }

            //////////////////////////////////////////////////////////////////////////////////////////
        }else{//验证失败
            //out.print("fail");
            return "fail";
        }
    }

}
